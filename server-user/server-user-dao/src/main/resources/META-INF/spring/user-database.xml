<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	    http://www.springframework.org/schema/tx
	    http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 扫描业务组件 -->
    <context:component-scan base-package="com.server.user.dao">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
    </context:component-scan>

    <!-- 配置文件 -->
    <context:property-placeholder location="classpath:config/*.properties" ignore-unresolvable="true" order="1"/>

    <!-- druid dataSource -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}" />
        <property name="url" value="${db.url}" />
        <property name="username" value="${db.username}" />
        <property name="password" value="${db.password}" />
        <!-- pass decrypt -->
        <property name="filters" value="config" />
        <!--<property name="connectionProperties" value="config.decrypt=true" />-->
        <property name="maxActive" value="${db.maxActive}" />
        <property name="initialSize" value="${db.initialSize}" />
        <property name="maxWait" value="${db.maxWait}" />
        <property name="minIdle" value="${db.minIdle}" />
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
        <property name="validationQuery" value="${db.validationQuery}" />
        <property name="testWhileIdle" value="${db.testWhileIdle}" />
        <property name="testOnBorrow" value="${db.testOnBorrow}" />
        <property name="testOnReturn" value="${db.testOnReturn}" />
        <property name="removeAbandoned" value="${db.removeAbandoned}" />
        <property name="removeAbandonedTimeout" value="${db.removeAbandonedTimeout}" />
    </bean>

    <!-- myBatis配置 -->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="configLocation" value="classpath:config/mybatis-config.xml" />-->
        <!--<property name="mapperLocations" value="classpath:config/mapper/*.xml" />-->
        <!--<property name="dataSource" ref="dataSource" />-->
        <!--<property name="typeAliasesPackage" value="com.server.user.dao.model"></property>-->
        <!--<property name="plugins">-->
            <!--<list>-->
                <!--<bean class="com.github.pagehelper.PageHelper">-->
                    <!--<property name="properties">-->
                        <!--<value>-->
                            <!--dialect=mysql-->
                            <!--reasonable=true-->
                            <!--supportMethodsArguments=true-->
                            <!--returnPageInfo=check-->
                            <!--params=count=countSql-->
                        <!--</value>-->
                    <!--</property>-->
                <!--</bean>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- spring与mybatis整合配置，扫描所有dao -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"-->
          <!--p:basePackage="com.server.user.dao.mapper"-->
          <!--p:sqlSessionFactoryBeanName="sqlSessionFactory" />-->

    <!-- 事务 -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource" />-->
    <!--</bean>-->

    <!-- 定义事务管理 -->
    <bean id="hibernateTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <!--hibernate配置-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />

        <!-- hibernate的相关属性配置 -->
        <property name="hibernateProperties">
            <value>
                <!-- 设置数据库方言 -->
                hibernate.dialect=${hibernate.dialect}
                <!-- 设置自动创建|更新|验证数据库表结构 -->
                hibernate.hbm2ddl.auto=${hibernate.hbm2ddl.auto}
                <!-- 是否在控制台显示sql -->
                hibernate.show_sql=${hibernate.show_sql}
                <!-- 是否格式化sql，优化显示 -->
                hibernate.format_sql=${hibernate.format_sql}
                <!-- 是否开启二级缓存 -->
                hibernate.cache.use_second_level_cache=${hibernate.cache.use_second_level_cache}
                <!-- 是否开启查询缓存 -->
                hibernate.cache.use_query_cache=${hibernate.cache.use_query_cache}
                <!-- 数据库批量查询最大数 -->
                hibernate.jdbc.fetch_size=${hibernate.jdbc.fetch_size}
                <!-- 数据库批量更新、添加、删除操作最大数 -->
                hibernate.jdbc.batch_size=${hibernate.jdbc.batch_size}
                <!-- 是否自动提交事务 -->
                hibernate.connection.autocommit=${hibernate.connection.autocommit}
                <!-- 指定hibernate在何时释放JDBC连接 -->
                hibernate.connection.release_mode=${hibernate.connection.release_mode}
                <!-- 创建session方式 hibernate4.x 的方式 -->
                hibernate.current_session_context_class=${hibernate.current_session_context_class}
                <!-- javax.persistence.validation.mode默认情况下是auto的，就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包
                    所以把它设置为none即可 -->
                javax.persistence.validation.mode=${javax.persistence.validation.mode}
            </value>
        </property>
        <!-- 自动扫描实体对象com.server.model的包结构中存放实体类 -->
        <property name="packagesToScan" value="com.server.entity" />
    </bean>

    <!-- 事务注解驱动 -->
    <tx:annotation-driven transaction-manager="hibernateTransactionManager" />

</beans>